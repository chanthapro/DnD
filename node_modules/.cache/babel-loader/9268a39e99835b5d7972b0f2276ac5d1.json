{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\CHANTHA\\\\Desktop\\\\react-beautiful-dnd-simple-board\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"C:\\\\Users\\\\CHANTHA\\\\Desktop\\\\react-beautiful-dnd-simple-board\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"C:\\\\Users\\\\CHANTHA\\\\Desktop\\\\react-beautiful-dnd-simple-board\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"C:\\\\Users\\\\CHANTHA\\\\Desktop\\\\react-beautiful-dnd-simple-board\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\n// a little function to help us with reordering the result\nvar reorder = function reorder(list, startIndex, endIndex) {\n  var result = Array.from(list);\n\n  var _result$splice = result.splice(startIndex, 1),\n      _result$splice2 = _slicedToArray(_result$splice, 1),\n      removed = _result$splice2[0];\n\n  result.splice(endIndex, 0, removed);\n  return result;\n};\n\nexport default reorder;\nexport var reorderQuoteMap = function reorderQuoteMap(_ref) {\n  var _objectSpread3;\n\n  var quoteMap = _ref.quoteMap,\n      source = _ref.source,\n      destination = _ref.destination;\n\n  var current = _toConsumableArray(quoteMap[source.droppableId]);\n\n  var next = _toConsumableArray(quoteMap[destination.droppableId]);\n\n  var target = current[source.index]; // moving to same list\n\n  if (source.droppableId === destination.droppableId) {\n    var reordered = reorder(current, source.index, destination.index);\n\n    var _result = _objectSpread({}, quoteMap, _defineProperty({}, source.droppableId, reordered));\n\n    return {\n      quoteMap: _result\n    };\n  } // moving to different list\n  // remove from original\n\n\n  current.splice(source.index, 1); // insert into next\n\n  next.splice(destination.index, 0, target);\n\n  var result = _objectSpread({}, quoteMap, (_objectSpread3 = {}, _defineProperty(_objectSpread3, source.droppableId, current), _defineProperty(_objectSpread3, destination.droppableId, next), _objectSpread3));\n\n  return {\n    quoteMap: result\n  };\n};","map":{"version":3,"sources":["C:/Users/CHANTHA/Desktop/react-beautiful-dnd-simple-board/src/reorder.js"],"names":["reorder","list","startIndex","endIndex","result","Array","from","splice","removed","reorderQuoteMap","quoteMap","source","destination","current","droppableId","next","target","index","reordered"],"mappings":";;;;;AAAA;AACA,IAAMA,OAAO,GAAG,SAAVA,OAAU,CAACC,IAAD,EAAOC,UAAP,EAAmBC,QAAnB,EAAgC;AAC9C,MAAMC,MAAM,GAAGC,KAAK,CAACC,IAAN,CAAWL,IAAX,CAAf;;AAD8C,uBAE5BG,MAAM,CAACG,MAAP,CAAcL,UAAd,EAA0B,CAA1B,CAF4B;AAAA;AAAA,MAEvCM,OAFuC;;AAG9CJ,EAAAA,MAAM,CAACG,MAAP,CAAcJ,QAAd,EAAwB,CAAxB,EAA2BK,OAA3B;AAEA,SAAOJ,MAAP;AACD,CAND;;AAQA,eAAeJ,OAAf;AAEA,OAAO,IAAMS,eAAe,GAAG,SAAlBA,eAAkB,OAAuC;AAAA;;AAAA,MAApCC,QAAoC,QAApCA,QAAoC;AAAA,MAA1BC,MAA0B,QAA1BA,MAA0B;AAAA,MAAlBC,WAAkB,QAAlBA,WAAkB;;AACpE,MAAMC,OAAO,sBAAOH,QAAQ,CAACC,MAAM,CAACG,WAAR,CAAf,CAAb;;AACA,MAAMC,IAAI,sBAAOL,QAAQ,CAACE,WAAW,CAACE,WAAb,CAAf,CAAV;;AACA,MAAME,MAAM,GAAGH,OAAO,CAACF,MAAM,CAACM,KAAR,CAAtB,CAHoE,CAKpE;;AACA,MAAIN,MAAM,CAACG,WAAP,KAAuBF,WAAW,CAACE,WAAvC,EAAoD;AAClD,QAAMI,SAAS,GAAGlB,OAAO,CAACa,OAAD,EAAUF,MAAM,CAACM,KAAjB,EAAwBL,WAAW,CAACK,KAApC,CAAzB;;AACA,QAAMb,OAAM,qBACPM,QADO,sBAETC,MAAM,CAACG,WAFE,EAEYI,SAFZ,EAAZ;;AAIA,WAAO;AACLR,MAAAA,QAAQ,EAAEN;AADL,KAAP;AAGD,GAfmE,CAiBpE;AAEA;;;AACAS,EAAAA,OAAO,CAACN,MAAR,CAAeI,MAAM,CAACM,KAAtB,EAA6B,CAA7B,EApBoE,CAqBpE;;AACAF,EAAAA,IAAI,CAACR,MAAL,CAAYK,WAAW,CAACK,KAAxB,EAA+B,CAA/B,EAAkCD,MAAlC;;AAEA,MAAMZ,MAAM,qBACPM,QADO,wDAETC,MAAM,CAACG,WAFE,EAEYD,OAFZ,mCAGTD,WAAW,CAACE,WAHH,EAGiBC,IAHjB,mBAAZ;;AAMA,SAAO;AACLL,IAAAA,QAAQ,EAAEN;AADL,GAAP;AAGD,CAjCM","sourcesContent":["// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\nexport default reorder;\n\nexport const reorderQuoteMap = ({ quoteMap, source, destination }) => {\n  const current = [...quoteMap[source.droppableId]];\n  const next = [...quoteMap[destination.droppableId]];\n  const target = current[source.index];\n\n  // moving to same list\n  if (source.droppableId === destination.droppableId) {\n    const reordered = reorder(current, source.index, destination.index);\n    const result = {\n      ...quoteMap,\n      [source.droppableId]: reordered\n    };\n    return {\n      quoteMap: result\n    };\n  }\n\n  // moving to different list\n\n  // remove from original\n  current.splice(source.index, 1);\n  // insert into next\n  next.splice(destination.index, 0, target);\n\n  const result = {\n    ...quoteMap,\n    [source.droppableId]: current,\n    [destination.droppableId]: next\n  };\n\n  return {\n    quoteMap: result\n  };\n};\n"]},"metadata":{},"sourceType":"module"}